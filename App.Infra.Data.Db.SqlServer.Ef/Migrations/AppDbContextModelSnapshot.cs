// <auto-generated />
using System;
using App.Infra.Data.Db.SqlServer.Ef.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Data.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.HomeService.CategoryEntity.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\TamizKari.jpg",
                            IsDeleted = false,
                            Title = "تمیزکاری"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\Sakhteman.jpg",
                            IsDeleted = false,
                            Title = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\TamiratAshiya.jpg",
                            IsDeleted = false,
                            Title = "تعمیرات اشیا"
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\AsbabKeshi.jpg",
                            IsDeleted = false,
                            Title = "اسباب کشی و حمل بار"
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\Khodro.jpg",
                            IsDeleted = false,
                            Title = "خودرو"
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\SalamatZibaii.jpg",
                            IsDeleted = false,
                            Title = "سلامت و زیبایی"
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\Sazman.jpg",
                            IsDeleted = false,
                            Title = "سازمان ها و مجتمع ها"
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "D:\\MaktabSharif\\FinalProject-HomeService\\HomeService\\HomeService.Endpoints.RazorPages\\wwwroot\\Images\\Category\\Sayer.png",
                            IsDeleted = false,
                            Title = "سایر"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CityEntity.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Title = "مشهد"
                        },
                        new
                        {
                            Id = 3,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "شیراز"
                        },
                        new
                        {
                            Id = 5,
                            Title = "تبریز"
                        },
                        new
                        {
                            Id = 6,
                            Title = "کرج"
                        },
                        new
                        {
                            Id = 7,
                            Title = "قم"
                        },
                        new
                        {
                            Id = 8,
                            Title = "اهواز"
                        },
                        new
                        {
                            Id = 9,
                            Title = "رشت"
                        },
                        new
                        {
                            Id = 10,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 11,
                            Title = "زاهدان"
                        },
                        new
                        {
                            Id = 12,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 13,
                            Title = "یزد"
                        },
                        new
                        {
                            Id = 14,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 15,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 16,
                            Title = "سنندج"
                        },
                        new
                        {
                            Id = 17,
                            Title = "بندرعباس"
                        },
                        new
                        {
                            Id = 18,
                            Title = "زنجان"
                        },
                        new
                        {
                            Id = 19,
                            Title = "ساری"
                        },
                        new
                        {
                            Id = 20,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 21,
                            Title = "مازندران"
                        },
                        new
                        {
                            Id = 22,
                            Title = "گرگان"
                        },
                        new
                        {
                            Id = 23,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 24,
                            Title = "خرم آباد"
                        },
                        new
                        {
                            Id = 25,
                            Title = "سمنان"
                        },
                        new
                        {
                            Id = 26,
                            Title = "دزفول"
                        },
                        new
                        {
                            Id = 27,
                            Title = "آبادان"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CommentEntity.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentAt = new DateTime(2025, 3, 1, 20, 53, 41, 392, DateTimeKind.Local).AddTicks(2736),
                            CustomerId = 1,
                            ExpertId = 2,
                            RequestId = 1,
                            StatusEnum = 0,
                            Text = "عالی بود"
                        },
                        new
                        {
                            Id = 2,
                            CommentAt = new DateTime(2025, 3, 1, 20, 53, 41, 393, DateTimeKind.Local).AddTicks(2956),
                            CustomerId = 2,
                            ExpertId = 1,
                            RequestId = 2,
                            StatusEnum = 0,
                            Text = "بسیار بد اخلاق"
                        },
                        new
                        {
                            Id = 3,
                            CommentAt = new DateTime(2025, 3, 1, 20, 53, 41, 393, DateTimeKind.Local).AddTicks(2968),
                            CustomerId = 3,
                            ExpertId = 2,
                            RequestId = 3,
                            StatusEnum = 0,
                            Text = "کار بلد"
                        },
                        new
                        {
                            Id = 4,
                            CommentAt = new DateTime(2025, 3, 1, 20, 53, 41, 393, DateTimeKind.Local).AddTicks(2970),
                            CustomerId = 1,
                            ExpertId = 3,
                            RequestId = 4,
                            StatusEnum = 0,
                            Text = "حیف پولی که بهت دادم"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Pirozi",
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            Address = "TehranPars",
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            Address = "KianShahr",
                            UserId = 7
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "ارایه بهترین خدمات برای شما",
                            Score = 3.4f,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Biography = "بهترین کیفیت و پایین ترین قیمت",
                            Score = 4.4f,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Biography = "رضایت مشتریان خوشحالی ماست",
                            Score = 4.6f,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ImageEntity.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "Images/trending/1.jpg",
                            RequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Path = "Images/trending/2.jpg",
                            RequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            Path = "Images/trending/4.jpg",
                            RequestId = 2
                        },
                        new
                        {
                            Id = 4,
                            Path = "Images/trending/3.jpg",
                            RequestId = 3
                        },
                        new
                        {
                            Id = 5,
                            Path = "Images/trending/5.jpg",
                            RequestId = 4
                        },
                        new
                        {
                            Id = 6,
                            Path = "Images/trending/6.jpg",
                            RequestId = 4
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.RequestEntity.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfCompletion")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeOfCompletion")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DateOfCompletion = new DateOnly(2025, 5, 3),
                            Description = "Bana",
                            Price = 240,
                            RequestAt = new DateTime(2025, 3, 1, 20, 53, 41, 398, DateTimeKind.Local).AddTicks(8881),
                            ServiceId = 5,
                            Status = 3,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            DateOfCompletion = new DateOnly(2025, 4, 8),
                            Description = "Bana",
                            Price = 342,
                            RequestAt = new DateTime(2025, 3, 1, 20, 53, 41, 398, DateTimeKind.Local).AddTicks(9518),
                            ServiceId = 3,
                            Status = 5,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            DateOfCompletion = new DateOnly(2025, 8, 18),
                            Description = "Bana",
                            Price = 350,
                            RequestAt = new DateTime(2025, 3, 1, 20, 53, 41, 398, DateTimeKind.Local).AddTicks(9574),
                            ServiceId = 1,
                            Status = 4,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 3,
                            DateOfCompletion = new DateOnly(2025, 4, 2),
                            Description = "Bana",
                            Price = 840,
                            RequestAt = new DateTime(2025, 3, 1, 20, 53, 41, 398, DateTimeKind.Local).AddTicks(9578),
                            ServiceId = 2,
                            Status = 2,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BasePrice")
                        .HasColumnType("real");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس عادی نظافت",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس ویژه نظافت",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس لوکس نظافت",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "نظافت راه‌ پله",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس نظافت فوری",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سمپاشی فضای داخلی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "پذیرایی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "کارگر ساده",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "(شستشو در محل (مبل، موکت، فرش)",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "قالیشویی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "خشکشویی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 23,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "پرده‌شویی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "سرامیک‌ خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "کارواش نانو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "کارواش با آب",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "واکس و پولیش خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "صفرشویی خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "موتورشویی خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "پکیج کارواش VIP (صفرشویی VIP + واکس و پولیش سه مرحله‌ای)",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 19,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "شفاف‌سازی چراغ خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 20,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "احیای رنگ خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 21,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "صافکاری و نقاشی خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 22,
                            BasePrice = 0f,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "نصب شیشه دودی خودرو در محل",
                            VisitCount = 0
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsDeleted = false,
                            Title = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsDeleted = false,
                            Title = "شستشو"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsDeleted = false,
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "تعمیرات ساختمان"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "طراحی و بازسازی ساختمان"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "برقکاری"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "چوب و کابینت"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "خدمات شیشه ای ساختمان"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "باغبانی و فضای سبز"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "نصب و تعمیر لوازم خانگی"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "خدمات کامپیوتری"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "تعمیرات موبایل"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            IsDeleted = false,
                            Title = "باربری و جابجایی"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            IsDeleted = false,
                            Title = "خدمات و تعمیرات خودرو"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            IsDeleted = false,
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "زیبایی بانوان"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "پزشکی و پرستاری"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "حیوانات خانگی"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "مشاوره"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "پیرایش و زیبایی آقایان"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "تندرستی و ورزش"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 7,
                            IsDeleted = false,
                            Title = "خدمات شرکتی"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 7,
                            IsDeleted = false,
                            Title = "تامین نیروی انسانی"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "خیاطی و تعمیرات لباس"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "مجالس و رویدادها"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "آموزش"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "همه فن حریف"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "خدمات فوری"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "کودک"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SuggestionEntity.Entities.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("SuggestedPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("SuggestionAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 1,
                            RequestId = 1,
                            Status = 1,
                            SuggestedPrice = 250f,
                            SuggestionAt = new DateTime(2025, 3, 1, 20, 53, 41, 403, DateTimeKind.Local).AddTicks(411)
                        },
                        new
                        {
                            Id = 2,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 2,
                            RequestId = 1,
                            Status = 3,
                            SuggestedPrice = 250f,
                            SuggestionAt = new DateTime(2025, 3, 1, 20, 53, 41, 403, DateTimeKind.Local).AddTicks(1020)
                        },
                        new
                        {
                            Id = 3,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 3,
                            RequestId = 2,
                            Status = 4,
                            SuggestedPrice = 250f,
                            SuggestionAt = new DateTime(2025, 3, 1, 20, 53, 41, 403, DateTimeKind.Local).AddTicks(1025)
                        },
                        new
                        {
                            Id = 4,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 2,
                            RequestId = 3,
                            Status = 2,
                            SuggestedPrice = 250f,
                            SuggestionAt = new DateTime(2025, 3, 1, 20, 53, 41, 403, DateTimeKind.Local).AddTicks(1028)
                        },
                        new
                        {
                            Id = 5,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 3,
                            RequestId = 4,
                            Status = 4,
                            SuggestedPrice = 250f,
                            SuggestionAt = new DateTime(2025, 3, 1, 20, 53, 41, 403, DateTimeKind.Local).AddTicks(1030)
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.UserEntity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<float?>("Balance")
                        .HasColumnType("real");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "59bf811a-6db9-4fe0-a2d9-a78c528574c4",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOA+ms1+mchJxeT22PmjwSrhLRjpcmRJVuzlzv9EXvIz4WTECRi7REaW5vG0ywFCw==",
                            PhoneNumber = "09377507920",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 1, 20, 53, 41, 407, DateTimeKind.Local).AddTicks(455),
                            RoleId = 1,
                            SecurityStamp = "ebb1ba6d-03b2-43e0-9a4a-5f4c1191d1c9",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            CityId = 4,
                            ConcurrencyStamp = "1e725075-f8cc-4a6b-8513-db72915cac50",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEP7jeeNgYQE44k0MKf1kDzuM7Cu+AKrl0TE0mHnakhxjn3lgkXCgczfwgGBjami+ZA==",
                            PhoneNumber = "09245112357",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 1, 20, 53, 41, 407, DateTimeKind.Local).AddTicks(730),
                            RoleId = 2,
                            SecurityStamp = "90b63b57-562c-43e0-8f63-47e24d36dc4c",
                            TwoFactorEnabled = false,
                            UserName = "Ali"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            CityId = 2,
                            ConcurrencyStamp = "b0a9adda-11c5-4524-861c-698dc70d8dab",
                            Email = "Mohsen@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHSEN@GMAIL.COM",
                            NormalizedUserName = "MOHSEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDv5ry0qUIopHEsMCi4gMQb7VRSELR+Cj/VazuE4yochn73khRa0RaypNbGkwdcNAw==",
                            PhoneNumber = "09106578542",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 1, 20, 53, 41, 407, DateTimeKind.Local).AddTicks(742),
                            RoleId = 2,
                            SecurityStamp = "6fd3ef24-f5f9-4f9a-aa41-9013749f54b0",
                            TwoFactorEnabled = false,
                            UserName = "Mohsen@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "5ed82c2d-ada2-46c0-8a54-094644b1071e",
                            Email = "Sahar@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAHAR@GMAIL.COM",
                            NormalizedUserName = "SAHAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENtt4Kd5Gpfmxvp1Ig4agGUicg1yTpQSe4gdDU2CwYeRIGhG9aX7ft1zkvf7bK7EVg==",
                            PhoneNumber = "09304578725",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 1, 20, 53, 41, 407, DateTimeKind.Local).AddTicks(753),
                            RoleId = 2,
                            SecurityStamp = "2387bdbc-19f8-4b79-9128-7de31f789fbd",
                            TwoFactorEnabled = false,
                            UserName = "Sahar@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "1ae25b3d-6378-4099-b9bb-684efbc86bbe",
                            Email = "Majd@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAJID@GMAIL.COM",
                            NormalizedUserName = "MAJID@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA2fXZayIhrqba9i2H01AQUNrtvEAvmjhd0ICaUrLAZQC/QBiVwFz06gPJtYdK0HOQ==",
                            PhoneNumber = "09206548795",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 1, 20, 53, 41, 407, DateTimeKind.Local).AddTicks(770),
                            RoleId = 3,
                            SecurityStamp = "bac1a043-1869-4106-b720-3108f1cce842",
                            TwoFactorEnabled = false,
                            UserName = "Majid@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "27935936-b4b3-4b41-9fbb-92f40cc2cd6e",
                            Email = "Parvane@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARVANE@GMAIL.COM",
                            NormalizedUserName = "PARVANE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNCvU0bs0nBQh2ReQVqs4u2duWL7ECHGBmdUxQ+NZnag/KMFE6jVPjNgOLOdODmRA==",
                            PhoneNumber = "09632548785",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 1, 20, 53, 41, 407, DateTimeKind.Local).AddTicks(788),
                            RoleId = 3,
                            SecurityStamp = "688638cd-1a75-456e-baa9-73998e5a2b72",
                            TwoFactorEnabled = false,
                            UserName = "Parvane@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            CityId = 8,
                            ConcurrencyStamp = "d54b464a-23d4-46ac-b0b6-b08a1056b336",
                            Email = "Hasan@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HASAN@GMAIL.COM",
                            NormalizedUserName = "HASAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFXQb2jPLhsyTaJGerRC77S4XL/bS4g1N5V0iX/TuWO0UCj6RbtMdjpQG4BTFz/Pyg==",
                            PhoneNumber = "09223458712",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 1, 20, 53, 41, 407, DateTimeKind.Local).AddTicks(798),
                            RoleId = 3,
                            SecurityStamp = "f197b65e-0d0f-4aeb-9514-0334e15336fa",
                            TwoFactorEnabled = false,
                            UserName = "Hasan@gmail.com"
                        });
                });

            modelBuilder.Entity("ExpertServiceCategory", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("SkilsId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "SkilsId");

                    b.HasIndex("SkilsId");

                    b.ToTable("ExpertServiceCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "ExpertId",
                            ClaimValue = "1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "ExpertId",
                            ClaimValue = "2",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "ExpertId",
                            ClaimValue = "3",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "CustomerId",
                            ClaimValue = "1",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "CustomerId",
                            ClaimValue = "2",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "CustomerId",
                            ClaimValue = "3",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CommentEntity.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.RequestEntity.Entities.Request", "Request")
                        .WithOne("Comment")
                        .HasForeignKey("App.Domain.Core.HomeService.CommentEntity.Entities.Comment", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", "User")
                        .WithOne("Expert")
                        .HasForeignKey("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ImageEntity.Entities.Image", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.RequestEntity.Entities.Request", "Request")
                        .WithMany("Images")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.RequestEntity.Entities.Request", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", "SubCategory")
                        .WithMany("Services")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CategoryEntity.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SuggestionEntity.Entities.Suggestion", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "Expert")
                        .WithMany("Suggestions")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.RequestEntity.Entities.Request", "Request")
                        .WithMany("Suggestions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.UserEntity.Entities.User", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CityEntity.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ExpertServiceCategory", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", null)
                        .WithMany()
                        .HasForeignKey("SkilsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CategoryEntity.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CityEntity.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.RequestEntity.Entities.Request", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Images");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.UserEntity.Entities.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });
#pragma warning restore 612, 618
        }
    }
}
