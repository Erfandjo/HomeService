// <auto-generated />
using System;
using App.Infra.Data.Db.SqlServer.Ef.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Data.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250306210952_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.HomeService.CategoryEntity.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "\\Images\\Category\\df97889b-19b7-4bd4-9bd6-ab24ba2df64e170186481.jpg",
                            IsDeleted = false,
                            Title = "تمیزکاری"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "\\Images\\Category\\29727be9-976b-4cdc-894d-c54519ffe8a4Sakhteman.jpg",
                            IsDeleted = false,
                            Title = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "\\Images\\Category\\eb660482-afd7-4ddb-8cfc-c06105e95900TamiratAshiya.jpg",
                            IsDeleted = false,
                            Title = "تعمیرات اشیا"
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "\\Images\\Category\\812cef5c-a6fa-4b90-9575-226a430b2b98AsbabKeshi.jpg",
                            IsDeleted = false,
                            Title = "اسباب کشی و حمل بار"
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "\\Images\\Category\\c6a10cce-101c-4184-a558-ee932c1f073eKhodro.jpg",
                            IsDeleted = false,
                            Title = "خودرو"
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "\\Images\\Category\\50c993b5-d39b-4cfa-b0a3-184b1a127866SalamatZibaii.jpg",
                            IsDeleted = false,
                            Title = "سلامت و زیبایی"
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "\\Images\\Category\\a77551f4-cc95-4903-a85b-0285fe347d63Sazman.jpg",
                            IsDeleted = false,
                            Title = "سازمان ها و مجتمع ها"
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "\\Images\\Category\\2798b1dd-de02-4490-8265-bee8ed56ad4cSayer.png",
                            IsDeleted = false,
                            Title = "سایر"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CityEntity.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Title = "مشهد"
                        },
                        new
                        {
                            Id = 3,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "شیراز"
                        },
                        new
                        {
                            Id = 5,
                            Title = "تبریز"
                        },
                        new
                        {
                            Id = 6,
                            Title = "کرج"
                        },
                        new
                        {
                            Id = 7,
                            Title = "قم"
                        },
                        new
                        {
                            Id = 8,
                            Title = "اهواز"
                        },
                        new
                        {
                            Id = 9,
                            Title = "رشت"
                        },
                        new
                        {
                            Id = 10,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 11,
                            Title = "زاهدان"
                        },
                        new
                        {
                            Id = 12,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 13,
                            Title = "یزد"
                        },
                        new
                        {
                            Id = 14,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 15,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 16,
                            Title = "سنندج"
                        },
                        new
                        {
                            Id = 17,
                            Title = "بندرعباس"
                        },
                        new
                        {
                            Id = 18,
                            Title = "زنجان"
                        },
                        new
                        {
                            Id = 19,
                            Title = "ساری"
                        },
                        new
                        {
                            Id = 20,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 21,
                            Title = "مازندران"
                        },
                        new
                        {
                            Id = 22,
                            Title = "گرگان"
                        },
                        new
                        {
                            Id = 23,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 24,
                            Title = "خرم آباد"
                        },
                        new
                        {
                            Id = 25,
                            Title = "سمنان"
                        },
                        new
                        {
                            Id = 26,
                            Title = "دزفول"
                        },
                        new
                        {
                            Id = 27,
                            Title = "آبادان"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CommentEntity.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentAt = new DateTime(2025, 3, 7, 0, 39, 50, 515, DateTimeKind.Local).AddTicks(5796),
                            CustomerId = 1,
                            ExpertId = 2,
                            RequestId = 1,
                            StatusEnum = 0,
                            Text = "عالی بود"
                        },
                        new
                        {
                            Id = 2,
                            CommentAt = new DateTime(2025, 3, 7, 0, 39, 50, 517, DateTimeKind.Local).AddTicks(7209),
                            CustomerId = 2,
                            ExpertId = 1,
                            RequestId = 2,
                            StatusEnum = 0,
                            Text = "بسیار بد اخلاق"
                        },
                        new
                        {
                            Id = 3,
                            CommentAt = new DateTime(2025, 3, 7, 0, 39, 50, 517, DateTimeKind.Local).AddTicks(7233),
                            CustomerId = 3,
                            ExpertId = 2,
                            RequestId = 3,
                            StatusEnum = 0,
                            Text = "کار بلد"
                        },
                        new
                        {
                            Id = 4,
                            CommentAt = new DateTime(2025, 3, 7, 0, 39, 50, 517, DateTimeKind.Local).AddTicks(7237),
                            CustomerId = 1,
                            ExpertId = 3,
                            RequestId = 4,
                            StatusEnum = 0,
                            Text = "حیف پولی که بهت دادم"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Pirozi",
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            Address = "TehranPars",
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            Address = "KianShahr",
                            UserId = 7
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "ارایه بهترین خدمات برای شما",
                            Score = 3.4f,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Biography = "بهترین کیفیت و پایین ترین قیمت",
                            Score = 4.4f,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Biography = "رضایت مشتریان خوشحالی ماست",
                            Score = 4.6f,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ImageEntity.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "Images/trending/1.jpg",
                            RequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Path = "Images/trending/2.jpg",
                            RequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            Path = "Images/trending/4.jpg",
                            RequestId = 2
                        },
                        new
                        {
                            Id = 4,
                            Path = "Images/trending/3.jpg",
                            RequestId = 3
                        },
                        new
                        {
                            Id = 5,
                            Path = "Images/trending/5.jpg",
                            RequestId = 4
                        },
                        new
                        {
                            Id = 6,
                            Path = "Images/trending/6.jpg",
                            RequestId = 4
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.RequestEntity.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfCompletion")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeOfCompletion")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DateOfCompletion = new DateOnly(2025, 5, 3),
                            Description = "Bana",
                            Price = 240,
                            RequestAt = new DateTime(2025, 3, 7, 0, 39, 50, 526, DateTimeKind.Local).AddTicks(3170),
                            ServiceId = 5,
                            Status = 3,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            DateOfCompletion = new DateOnly(2025, 4, 8),
                            Description = "Bana",
                            Price = 342,
                            RequestAt = new DateTime(2025, 3, 7, 0, 39, 50, 526, DateTimeKind.Local).AddTicks(4009),
                            ServiceId = 3,
                            Status = 5,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            DateOfCompletion = new DateOnly(2025, 8, 18),
                            Description = "Bana",
                            Price = 350,
                            RequestAt = new DateTime(2025, 3, 7, 0, 39, 50, 526, DateTimeKind.Local).AddTicks(4015),
                            ServiceId = 1,
                            Status = 4,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 3,
                            DateOfCompletion = new DateOnly(2025, 4, 2),
                            Description = "Bana",
                            Price = 840,
                            RequestAt = new DateTime(2025, 3, 7, 0, 39, 50, 526, DateTimeKind.Local).AddTicks(4019),
                            ServiceId = 2,
                            Status = 2,
                            TimeOfCompletion = new TimeOnly(12, 5, 0)
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BasePrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = "12000000",
                            Description = "\r\nتوضیحات: سرویس نظافت معمولی برای حفظ تمیزی روزمره منزل یا محل کار. شامل گردگیری، جارو کردن، تی کشیدن و نظافت سطوح می‌شود.\r\n\r\nمزایا: مناسب برای افرادی که به دنبال حفظ نظافت پایه‌ای هستند.",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس عادی نظافت",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = "350000",
                            Description = "توضیحات: نظافت عمیق و دقیق برای مناطقی که نیاز به توجه بیشتری دارند. شامل تمیز کردن نقاط سخت‌دسترس، نظافت مبلمان و سطوح با دقت بالا.\r\n\r\nمزایا: ایده‌آل برای مواقعی که نیاز به تمیزی بیشتر و جزئی‌نگرانه‌تر دارید.\r\n\r\n",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس ویژه نظافت",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = "12000000",
                            Description = "توضیحات: سرویس نظافتی با بالاترین استانداردها و استفاده از مواد شوینده لوکس و تجهیزات پیشرفته. شامل نظافت کامل و براق‌سازی سطوح.\r\n\r\nمزایا: مناسب برای منازل و دفاتر لوکس که به دنبال بهترین کیفیت هستند.",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس لوکس نظافت",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = "1400000",
                            Description = "توضیحات: سرویس اختصاصی برای تمیز کردن و براق‌سازی راه‌پله‌ها، شامل پاک‌کردن لکه‌ها و گردگیری کامل.\r\n\r\nمزایا: مناسب برای ساختمان‌های مسکونی و اداری با راه‌پله‌های زیاد.",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "نظافت راه‌ پله",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = "210000",
                            Description = "توضیحات: سرویس سریع و بدون نیاز به وقت‌گیری قبلی برای مواقع اضطراری که نیاز به نظافت فوری دارید.\r\n\r\nمزایا: مناسب برای مهمانی‌های ناگهانی یا بازدیدهای غیرمنتظره.",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس نظافت فوری",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = "2100000",
                            Description = "توضیحات: سرویس سمپاشی برای از بین بردن حشرات موذی در فضای داخلی منزل یا محل کار. استفاده از مواد ایمن و موثر.\r\n\r\nمزایا: ایجاد محیطی سالم و عاری از حشرات.",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سمپاشی فضای داخلی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = "2400000",
                            Description = "توضیحات: ارائه نیروی کار ساده برای انجام کارهای سبک مانند جابجایی وسایل، نظافت اولیه و کمک در امور روزمره.\r\n\r\nمزایا: مناسب برای مواقعی که نیاز به کمک فوری دارید.",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "پذیرایی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = "2100000",
                            Description = "توضیحات: سرویس شستشوی حرفه‌ای مبلمان، موکت و فرش در محل شما، بدون نیاز به جابجایی وسایل.\r\n\r\nمزایا: صرفه‌جویی در زمان و حفظ کیفیت وسایل.",
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "کارگر ساده",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = "250000",
                            Description = "توضیحات: سرویس شستشوی حرفه‌ای مبلمان، موکت و فرش در محل شما، بدون نیاز به جابجایی وسایل. استفاده از دستگاه‌های پیشرفته و مواد شوینده مناسب برای هر نوع پارچه.\r\n\r\nمزایا:\r\n\r\nصرفه‌جویی در زمان و انرژی.\r\n\r\nجلوگیری از آسیب‌های ناشی از جابجایی.\r\n\r\nمناسب برای خانواده‌های شلوغ یا افرادی که وقت کافی برای نظافت ندارند.",
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "(شستشو در محل (مبل، موکت، فرش)",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = "241555",
                            Description = "توضیحات: سرویس شستشوی تخصصی فرش‌ها با دستگاه‌های مدرن و مواد شوینده مخصوص. این سرویس شامل ضدعفونی و خوشبوسازی فرش نیز می‌شود.\r\n\r\nمزایا:\r\n\r\nاز بین بردن لکه‌های سخت و عمیق.\r\n\r\nافزایش عمر فرش و حفظ رنگ آن.\r\n\r\nمناسب برای فرش‌های دست‌باف و ماشینی.",
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "قالیشویی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = "12000000",
                            Description = "توضیحات: سرویس خشکشویی حرفه‌ای برای لباس‌ها و پارچه‌های ظریف که نیاز به شستشوی خاص دارند.\r\n\r\nمزایا: مناسب برای لباس‌های گران‌قیمت و حساس.",
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "خشکشویی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 23,
                            BasePrice = "15420000",
                            Description = "\r\nتوضیحات: سرویس شستشوی حرفه‌ای پرده‌ها در محل شما یا در کارگاه تخصصی. این سرویس شامل شستشو، ضدعفونی و اتوکشی پرده‌ها می‌شود.\r\n\r\nمزایا:\r\n\r\nحفظ بافت و رنگ پرده‌ها.\r\n\r\nمناسب برای پرده‌های ظریف و حساس.\r\n\r\nصرفه‌جویی در زمان و هزینه.",
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "پرده‌شویی",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = "1400000",
                            Description = "توضیحات: سرویس براق‌سازی و محافظت از سرامیک خودرو برای افزایش طول عمر و زیبایی آن.\r\n\r\nمزایا: محافظت از رنگ و بدنه خودرو در برابر عوامل محیطی.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "سرامیک‌ خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = "4100000",
                            Description = "\r\nتوضیحات: استفاده از فناوری نانو برای شستشو و محافظت از بدنه خودرو، ایجاد لایه‌ای ضد خش و ضد آب.\r\n\r\nمزایا: افزایش درخشندگی و محافظت طولانی‌مدت.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "کارواش نانو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = "2700000",
                            Description = "\r\nتوضیحات: سرویس شستشوی خودرو با استفاده از آب و مواد شوینده مخصوص، برای تمیز کردن بدنه، شیشه‌ها، چرخ‌ها و سایر قسمت‌های بیرونی خودرو. این سرویس به صورت حرفه‌ای و با دقت بالا انجام می‌شود.\r\n\r\nمزایا:\r\n\r\nاز بین بردن گرد و غبار، لکه‌ها و آلودگی‌های سطحی.\r\n\r\nمناسب برای شستشوی سریع و روزمره خودرو.\r\n\r\nافزایش زیبایی ظاهری خودرو در کمترین زمان.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "کارواش با آب",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = "2100000",
                            Description = "\r\nتوضیحات: سرویس تخصصی واکس و پولیش خودرو برای بازگرداندن درخشش و زیبایی اولیه بدنه خودرو. این سرویس شامل پولیش برای از بین بردن خش‌های سطحی و واکس برای ایجاد لایه‌ای محافظ و براق‌کننده است.\r\n\r\nمزایا:\r\n\r\nمحافظت از رنگ و بدنه خودرو در برابر عوامل محیطی مانند نور خورشید، باران و آلودگی.\r\n\r\nاز بین بردن خش‌ها و لکه‌های سطحی.\r\n\r\nمناسب برای خودروهای قدیمی که نیاز به احیا دارند.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "واکس و پولیش خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = "140000",
                            Description = "توضیحات: سرویس نظافت کامل خودرو از داخل و خارج، شامل شستشوی موتور و زیر خودرو.\r\n\r\nمزایا: مناسب برای خودروهای نو یا خودروهایی که نیاز به نظافت کامل دارند.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "صفرشویی خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = "1700000",
                            Description = "\r\nتوضیحات: سرویس شستشوی موتور خودرو برای افزایش کارایی و زیبایی آن.\r\n\r\nمزایا: افزایش طول عمر موتور و بهبود عملکرد.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "موتورشویی خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = "1400000",
                            Description = "توضیحات: سرویس ویژه برای خودروهای لوکس، شامل صفرشویی کامل، واکس و پولیش سه مرحله‌ای.\r\n\r\nمزایا: مناسب برای خودروهای گران‌قیمت که نیاز به مراقبت ویژه دارند",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "پکیج کارواش VIP (صفرشویی VIP + واکس و پولیش سه مرحله‌ای)",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 19,
                            BasePrice = "1000000",
                            Description = "توضیحات: سرویس بازگرداندن شفافیت چراغ‌های خودرو که به مرور زمان کدر شده‌اند.\r\n\r\nمزایا: بهبود دید در شب و افزایش ایمنی.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "شفاف‌سازی چراغ خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 20,
                            BasePrice = "2700000",
                            Description = "\r\nتوضیحات: سرویس بازگرداندن رنگ اصلی خودرو و از بین بردن خش‌ها و لکه‌های سطحی.\r\n\r\nمزایا: افزایش زیبایی و ارزش خودرو.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "احیای رنگ خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 21,
                            BasePrice = "2100000",
                            Description = "توضیحات: سرویس تخصصی صافکاری و نقاشی خودرو برای رفع خراش‌ها و آسیب‌های بدنه.\r\n\r\nمزایا: بازگرداندن ظاهر اولیه خودرو.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "صافکاری و نقاشی خودرو",
                            VisitCount = 0
                        },
                        new
                        {
                            Id = 22,
                            BasePrice = "2100000",
                            Description = "\r\nتوضیحات: سرویس نصب شیشه دودی با کیفیت بالا برای افزایش حریم خصوصی و کاهش حرارت داخل خودرو.\r\n\r\nمزایا: بهبود ظاهر و راحتی خودرو.",
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "نصب شیشه دودی خودرو در محل",
                            VisitCount = 0
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsDeleted = false,
                            Title = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsDeleted = false,
                            Title = "شستشو"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsDeleted = false,
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "تعمیرات ساختمان"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "طراحی و بازسازی ساختمان"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "برقکاری"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "چوب و کابینت"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "خدمات شیشه ای ساختمان"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            IsDeleted = false,
                            Title = "باغبانی و فضای سبز"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "نصب و تعمیر لوازم خانگی"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "خدمات کامپیوتری"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            IsDeleted = false,
                            Title = "تعمیرات موبایل"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            IsDeleted = false,
                            Title = "باربری و جابجایی"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            IsDeleted = false,
                            Title = "خدمات و تعمیرات خودرو"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            IsDeleted = false,
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "زیبایی بانوان"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "پزشکی و پرستاری"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "حیوانات خانگی"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "مشاوره"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "پیرایش و زیبایی آقایان"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            IsDeleted = false,
                            Title = "تندرستی و ورزش"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 7,
                            IsDeleted = false,
                            Title = "خدمات شرکتی"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 7,
                            IsDeleted = false,
                            Title = "تامین نیروی انسانی"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "خیاطی و تعمیرات لباس"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "مجالس و رویدادها"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "آموزش"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "همه فن حریف"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "خدمات فوری"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 8,
                            IsDeleted = false,
                            Title = "کودک"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SuggestionEntity.Entities.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuggestedPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SuggestionAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 1,
                            RequestId = 1,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(3754)
                        },
                        new
                        {
                            Id = 2,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 2,
                            RequestId = 1,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(4441)
                        },
                        new
                        {
                            Id = 3,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 3,
                            RequestId = 2,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(4446)
                        },
                        new
                        {
                            Id = 4,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 2,
                            RequestId = 3,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(4449)
                        },
                        new
                        {
                            Id = 5,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 3,
                            RequestId = 4,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(4452)
                        },
                        new
                        {
                            Id = 6,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 3,
                            RequestId = 4,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(4460)
                        },
                        new
                        {
                            Id = 7,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 3,
                            RequestId = 4,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(4462)
                        },
                        new
                        {
                            Id = 8,
                            DeliveryDate = new DateOnly(2025, 5, 2),
                            Description = "کار شما تخصص ماست",
                            ExpertId = 3,
                            RequestId = 4,
                            Status = 1,
                            SuggestedPrice = "250",
                            SuggestionAt = new DateTime(2025, 3, 7, 0, 39, 50, 533, DateTimeKind.Local).AddTicks(4465)
                        });
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.UserEntity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<float?>("Balance")
                        .HasColumnType("real");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "d3ca6ced-f562-42a2-89fe-cb8645df3d97",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgqK5HchxCjm/yO5X0BMBJ2HzPw3dvTwUsLNS++eMM3QcR7IKCi5xF9wifgQfieAA==",
                            PhoneNumber = "09377507920",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 7, 0, 39, 50, 539, DateTimeKind.Local).AddTicks(376),
                            RoleId = 1,
                            SecurityStamp = "427ccdbc-685c-4739-92a2-e16bf9c3a6b0",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            CityId = 4,
                            ConcurrencyStamp = "60009b19-675c-4f72-809d-eb16dfc35935",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVSIl4mbLT8BQznnrMU0aNJqIozhk2RzWt8Dcu7GkSG7H2TqiQo5jo8+bma/Amc0Q==",
                            PhoneNumber = "09245112357",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 7, 0, 39, 50, 539, DateTimeKind.Local).AddTicks(776),
                            RoleId = 2,
                            SecurityStamp = "6b9379ec-8e67-45d6-9f84-280854dcf46f",
                            TwoFactorEnabled = false,
                            UserName = "Ali"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            CityId = 2,
                            ConcurrencyStamp = "64ea5d38-fea5-4da0-a08f-0da3b6013dd6",
                            Email = "Mohsen@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHSEN@GMAIL.COM",
                            NormalizedUserName = "MOHSEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIn8/xcosBFBQ5rCp8wKMWWUJRnV9hHwRl5RHYOusVL04PIkP5kTRaFEUYJ3jIhLKQ==",
                            PhoneNumber = "09106578542",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 7, 0, 39, 50, 539, DateTimeKind.Local).AddTicks(792),
                            RoleId = 2,
                            SecurityStamp = "75ce7c59-8e80-4e02-b250-aaf6de7501ed",
                            TwoFactorEnabled = false,
                            UserName = "Mohsen@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "e33c2ca9-225b-48a6-a5ac-5efccba04637",
                            Email = "Sahar@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAHAR@GMAIL.COM",
                            NormalizedUserName = "SAHAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHtPCiHWyQi1VuNWMOXVkbMAhha3ULVY04qatbda54h3KSTBdpokRIcEWFpcJ5nkcg==",
                            PhoneNumber = "09304578725",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 7, 0, 39, 50, 539, DateTimeKind.Local).AddTicks(821),
                            RoleId = 2,
                            SecurityStamp = "179e3701-243f-4f59-a237-7c1c8be14f76",
                            TwoFactorEnabled = false,
                            UserName = "Sahar@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "1fe3a96d-ef4c-4e47-83ed-9e44a6db5765",
                            Email = "Majd@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAJID@GMAIL.COM",
                            NormalizedUserName = "MAJID@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDg38QNVmmak4I0FlZ+ozlYxCDC4/jKj84HnFdfWaRLtm0gR3dyuiNTQdiRtQnyazA==",
                            PhoneNumber = "09206548795",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 7, 0, 39, 50, 539, DateTimeKind.Local).AddTicks(840),
                            RoleId = 3,
                            SecurityStamp = "7996d59d-ae5c-407b-86d1-83dd10f60759",
                            TwoFactorEnabled = false,
                            UserName = "Majid@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ConcurrencyStamp = "dd58ddd3-5362-48a7-a09e-14ac4ab3f0e3",
                            Email = "Parvane@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARVANE@GMAIL.COM",
                            NormalizedUserName = "PARVANE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMluwjj6MbMURKCMaCyCrdcfF1TMBwr8HfU9/b0BkFhaBG507yKd9ocTDuuMcJw4w==",
                            PhoneNumber = "09632548785",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 7, 0, 39, 50, 539, DateTimeKind.Local).AddTicks(865),
                            RoleId = 3,
                            SecurityStamp = "1df7a60d-5ab8-44dc-92f6-642b8247a22b",
                            TwoFactorEnabled = false,
                            UserName = "Parvane@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            CityId = 8,
                            ConcurrencyStamp = "5ffc206b-427b-45dc-a26e-a1af60de51bf",
                            Email = "Hasan@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HASAN@GMAIL.COM",
                            NormalizedUserName = "HASAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKM9dKgJUKnt41Jb4T2hhI7TtXuYkSmuJtjtq3/PGw002xxnROda4ymZxvhubC8KRw==",
                            PhoneNumber = "09223458712",
                            PhoneNumberConfirmed = false,
                            RegisterAt = new DateTime(2025, 3, 7, 0, 39, 50, 539, DateTimeKind.Local).AddTicks(882),
                            RoleId = 3,
                            SecurityStamp = "655f19bb-5116-450e-89e0-0c7c1f41112d",
                            TwoFactorEnabled = false,
                            UserName = "Hasan@gmail.com"
                        });
                });

            modelBuilder.Entity("ExpertServiceCategory", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("SkilsId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "SkilsId");

                    b.HasIndex("SkilsId");

                    b.ToTable("ExpertServiceCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "ExpertId",
                            ClaimValue = "1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "ExpertId",
                            ClaimValue = "2",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "ExpertId",
                            ClaimValue = "3",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "CustomerId",
                            ClaimValue = "1",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "CustomerId",
                            ClaimValue = "2",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "CustomerId",
                            ClaimValue = "3",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CommentEntity.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.RequestEntity.Entities.Request", "Request")
                        .WithOne("Comment")
                        .HasForeignKey("App.Domain.Core.HomeService.CommentEntity.Entities.Comment", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", "User")
                        .WithOne("Expert")
                        .HasForeignKey("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ImageEntity.Entities.Image", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.RequestEntity.Entities.Request", "Request")
                        .WithMany("Images")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.RequestEntity.Entities.Request", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", "SubCategory")
                        .WithMany("Services")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CategoryEntity.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SuggestionEntity.Entities.Suggestion", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "Expert")
                        .WithMany("Suggestions")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.RequestEntity.Entities.Request", "Request")
                        .WithMany("Suggestions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.UserEntity.Entities.User", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.CityEntity.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ExpertServiceCategory", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", null)
                        .WithMany()
                        .HasForeignKey("SkilsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.HomeService.UserEntity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CategoryEntity.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CityEntity.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.RequestEntity.Entities.Request", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Images");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.ServiceCategoryEntity.Entities.ServiceCategory", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("App.Domain.Core.HomeService.UserEntity.Entities.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });
#pragma warning restore 612, 618
        }
    }
}
